plugins {
    id 'org.sonarqube' version '3.5.0.2730'
    id 'org.gretty' version '3.0.8' apply false
}

sonarqube {
    properties {
        property 'sonar.projectName', 'todo'
        property 'sonar.projectDescription', 'A task management application'
        property 'sonar.projectKey', 'com.manning.gia:todo'
        
        // For local testing without server - generate reports only
        property 'sonar.scanner.dumpToFile', 'build/sonar-scanner-report.json'
        
        // Disable server upload for local development
        property 'sonar.scanner.skip', System.getProperty('sonar.skip', 'false')
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    ext.configDir = new File(rootDir, 'config')

    sonarqube {
        properties {
            property 'sonar.sourceEncoding', 'UTF-8'
        }
    }

    repositories {
        mavenCentral()
    }
}

// Custom task for offline SonarQube analysis
task sonarOffline {
    group = 'verification'
    description = 'Performs SonarQube analysis without connecting to server'
    
    doLast {
        println "\n=== SonarQube Offline Analysis ==="
        println "Project: ${project.group}:${project.name}:${project.version}"
        println "Description: A task management application"
        
        def reportFile = file('build/sonar-analysis-summary.txt')
        reportFile.parentFile.mkdirs()
        
        def content = """
SonarQube Analysis Summary
=========================
Project: ${project.group}:${project.name}:${project.version}
Description: A task management application
Analysis Date: ${new Date()}

Subprojects analyzed:
"""
        
        subprojects.each { subproject ->
            content += "- ${subproject.name}\n"
            
            // Count source files
            def srcDir = file("${subproject.projectDir}/src/main/java")
            if (srcDir.exists()) {
                def javaFiles = fileTree(srcDir).include('**/*.java').files.size()
                content += "  Java files: ${javaFiles}\n"
            }
            
            def testDir = file("${subproject.projectDir}/src/test/java")
            if (testDir.exists()) {
                def testFiles = fileTree(testDir).include('**/*.java').files.size()
                content += "  Test files: ${testFiles}\n"
            }
        }
        
        content += "\nNote: This is an offline analysis. To perform actual SonarQube analysis,\n"
        content += "configure a SonarQube server or use SonarCloud.\n"
        
        reportFile.text = content
        
        println "\nAnalysis complete! Summary saved to: ${reportFile.absolutePath}"
        println "\n${content}"
    }
}
